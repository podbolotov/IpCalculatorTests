import random

from lib.tools.ip_tools import generate_valid_ip


class TargetNetworkCaseBundle:
    def __init__(self, title, description, ip_with_cidr):
        self.title: str = title
        self.description: str = description
        self.ip_with_cidr: str = ip_with_cidr


class PartialIpDataset:
    def __init__(self, ip_as_text: str, ip_as_list: list, case_title: str, case_description_part: str):
        self.ip_as_text: str = ip_as_text
        self.ip_as_list: list = ip_as_list
        self.case_title: str = case_title
        self.case_description_part: str = case_description_part


def get_target_networks_cases():
    return [
        TargetNetworkCaseBundle(
            title="Проверка первого из возможных адресов с набольшей подсетью",
            description="Данный кейс проверяет вычисление первого из возможных адресов наибольшим из возможных "
                        "размером подсети.\n\n"
                        "Данный тест проверяет только корректность вычислений, тестирование локализации или темы "
                        "оформления в его"
                        "пределах не производится.\n"
                        "Тестирование корректности вычислений производится следующим способом: \n"
                        "1. В рамках данного сценария всегда используется сеть 0.0.0.0/0.\n"
                        "2. На стороне тестового фреймворка вычисляются все данные подсети, вычисление которых "
                        "ожидается от"
                        "приложения.\n"
                        "3. IP-адрес 0.0.0.0/0 вводится на устройство.\n"
                        "4. На устройстве инициализируется вычисление данных подсети.\n"
                        "5. Тест производит сверку всех рассчитанных на устройстве данных подсети с данными, "
                        "ранее рассчитанными"
                        "на стороне тестового фреймворка.\n\n"
                        "При возникновении ошибки к отчёту будет приложен скриншот экрана на момент регистрации ошибки."
            ,
            ip_with_cidr="0.0.0.0/0"
        ),
        TargetNetworkCaseBundle(
            title="Проверка последнего из возможных адресов с наименьшей подсетью",
            description="Данный кейс проверяет вычисление последнего из возможных адресов наименьшим из возможных "
                        "размером подсети.\n\n"
                        "Данный тест проверяет только корректность вычислений, тестирование локализации или темы "
                        "оформления в его пределах не производится.\n"
                        "Тестирование корректности вычислений производится следующим способом: \n"
                        "1. В рамках данного сценария всегда используется сеть 255.255.255.255/32.\n"
                        "2. На стороне тестового фреймворка вычисляются все данные подсети, вычисление которых "
                        "ожидается от"
                        "приложения.\n"
                        "3. IP-адрес 255.255.255.255/32 вводится на устройство.\n"
                        "4. На устройстве инициализируется вычисление данных подсети.\n"
                        "5. Тест производит сверку всех рассчитанных на устройстве данных подсети с данными, "
                        "ранее рассчитанными"
                        "на стороне тестового фреймворка.\n\n"
                        "При возникновении ошибки к отчёту будет приложен скриншот экрана на момент регистрации ошибки."
            ,
            ip_with_cidr="255.255.255.255/32"
        ),
        TargetNetworkCaseBundle(
            title="Проверка случайного адреса из частной сети 10.x.x.x/8",
            description="Данный кейс проверяет вычисление для случайного адреса из частной сети 10.x.x.x/8.\n\n"
                        "Данный тест проверяет только корректность вычислений, тестирование локализации или темы оформления в его "
                        "пределах не производится.\n"
                        "Тестирование корректности вычислений производится следующим способом: \n"
                        "1. На стороне тестового фреймворка генерируется случайный (корректный) IP-адрес, но всегда из сети 10.x.x.x/8.\n"
                        "2. На стороне тестового фреймворка вычисляются все данные подсети, вычисление которых ожидается от "
                        "приложения.\n"
                        "3. Сгенерированный IP-адрес вводится на устройство.\n"
                        "4. На устройстве инициализируется вычисление данных подсети.\n"
                        "5. Тест производит сверку всех рассчитанных на устройстве данных подсети с данными, ранее рассчитанными "
                        "на стороне тестового фреймворка.\n\n"
                        "При возникновении ошибки к отчёту будет приложен скриншот экрана на момент регистрации ошибки.",
            ip_with_cidr=f"{generate_valid_ip(
                oc1="10",
                generate_cidr=False)}/8"
        ),
        TargetNetworkCaseBundle(
            title="Проверка случайного адреса из CGN сети 100.64.x.x/10",
            description="Данный кейс проверяет вычисление для случайного адреса из Carrier-Grade NAT сети 100.64.x.x/10.\n\n"
                        "Данный тест проверяет только корректность вычислений, тестирование локализации или темы оформления в его "
                        "пределах не производится.\n"
                        "Тестирование корректности вычислений производится следующим способом: \n"
                        "1. На стороне тестового фреймворка генерируется случайный (корректный) IP-адрес, но всегда из сети 100.64.x.x/10.\n"
                        "2. На стороне тестового фреймворка вычисляются все данные подсети, вычисление которых ожидается от "
                        "приложения.\n"
                        "3. Сгенерированный IP-адрес вводится на устройство.\n"
                        "4. На устройстве инициализируется вычисление данных подсети.\n"
                        "5. Тест производит сверку всех рассчитанных на устройстве данных подсети с данными, ранее рассчитанными "
                        "на стороне тестового фреймворка.\n\n"
                        "При возникновении ошибки к отчёту будет приложен скриншот экрана на момент регистрации ошибки.",
            ip_with_cidr=f"{generate_valid_ip(
                oc1="100",
                oc2="64",
                generate_cidr=False)}/10"
        ),
        TargetNetworkCaseBundle(
            title="Проверка случайного адреса из частной сети 172.16.x.x/12",
            description="Данный кейс проверяет вычисление для случайного адреса из частной сети 172.16.x.x/12.\n\n"
                        "Данный тест проверяет только корректность вычислений, тестирование локализации или темы оформления в его "
                        "пределах не производится.\n"
                        "Тестирование корректности вычислений производится следующим способом: \n"
                        "1. На стороне тестового фреймворка генерируется случайный (корректный) IP-адрес, но всегда из сети 172.16.x.x/12.\n"
                        "2. На стороне тестового фреймворка вычисляются все данные подсети, вычисление которых ожидается от "
                        "приложения.\n"
                        "3. Сгенерированный IP-адрес вводится на устройство.\n"
                        "4. На устройстве инициализируется вычисление данных подсети.\n"
                        "5. Тест производит сверку всех рассчитанных на устройстве данных подсети с данными, ранее рассчитанными "
                        "на стороне тестового фреймворка.\n\n"
                        "При возникновении ошибки к отчёту будет приложен скриншот экрана на момент регистрации ошибки.",
            ip_with_cidr=f"{generate_valid_ip(
                oc1="172",
                oc2="16",
                generate_cidr=False)}/12"
        ),
        TargetNetworkCaseBundle(
            title="Проверка случайного адреса из частной сети 192.168.x.x/16",
            description="Данный кейс проверяет вычисление для случайного адреса из частной сети 192.168.x.x/16.\n\n"
                        "Данный тест проверяет только корректность вычислений, тестирование локализации или темы оформления в его "
                        "пределах не производится.\n"
                        "Тестирование корректности вычислений производится следующим способом: \n"
                        "1. На стороне тестового фреймворка генерируется случайный (корректный) IP-адрес, но всегда из сети 192.168.x.x/16.\n"
                        "2. На стороне тестового фреймворка вычисляются все данные подсети, вычисление которых ожидается от "
                        "приложения.\n"
                        "3. Сгенерированный IP-адрес вводится на устройство.\n"
                        "4. На устройстве инициализируется вычисление данных подсети.\n"
                        "5. Тест производит сверку всех рассчитанных на устройстве данных подсети с данными, ранее рассчитанными "
                        "на стороне тестового фреймворка.\n\n"
                        "При возникновении ошибки к отчёту будет приложен скриншот экрана на момент регистрации ошибки.",
            ip_with_cidr=f"{generate_valid_ip(
                oc1="192",
                oc2="168",
                generate_cidr=False)}/16"
        ),
        TargetNetworkCaseBundle(
            title="Проверка случайного адреса из распространённой частной сети 192.168.0.x/24",
            description="Данный кейс проверяет вычисление для случайного адреса из очень распространённой частной сети 192.168.0.x/24.\n\n"
                        "Данный тест проверяет только корректность вычислений, тестирование локализации или темы оформления в его "
                        "пределах не производится.\n"
                        "Тестирование корректности вычислений производится следующим способом: \n"
                        "1. На стороне тестового фреймворка генерируется случайный (корректный) IP-адрес, но всегда из сети 192.168.0.x/24.\n"
                        "2. На стороне тестового фреймворка вычисляются все данные подсети, вычисление которых ожидается от "
                        "приложения.\n"
                        "3. Сгенерированный IP-адрес вводится на устройство.\n"
                        "4. На устройстве инициализируется вычисление данных подсети.\n"
                        "5. Тест производит сверку всех рассчитанных на устройстве данных подсети с данными, ранее рассчитанными "
                        "на стороне тестового фреймворка.\n\n"
                        "При возникновении ошибки к отчёту будет приложен скриншот экрана на момент регистрации ошибки.",
            ip_with_cidr=f"{generate_valid_ip(
                oc1="192",
                oc2="168",
                oc3="0",
                generate_cidr=False)}/24"
        ),
        TargetNetworkCaseBundle(
            title="Проверка случайного адреса из распространённой частной сети 192.168.1.x/24",
            description="Данный кейс проверяет вычисление для случайного адреса из очень распространённой частной сети 192.168.1.x/24.\n\n"
                        "Данный тест проверяет только корректность вычислений, тестирование локализации или темы оформления в его "
                        "пределах не производится.\n"
                        "Тестирование корректности вычислений производится следующим способом: \n"
                        "1. На стороне тестового фреймворка генерируется случайный (корректный) IP-адрес, но всегда из сети 192.168.1.x/24.\n"
                        "2. На стороне тестового фреймворка вычисляются все данные подсети, вычисление которых ожидается от "
                        "приложения.\n"
                        "3. Сгенерированный IP-адрес вводится на устройство.\n"
                        "4. На устройстве инициализируется вычисление данных подсети.\n"
                        "5. Тест производит сверку всех рассчитанных на устройстве данных подсети с данными, ранее рассчитанными "
                        "на стороне тестового фреймворка.\n\n"
                        "При возникновении ошибки к отчёту будет приложен скриншот экрана на момент регистрации ошибки.",
            ip_with_cidr=f"{generate_valid_ip(
                oc1="192",
                oc2="168",
                oc3="1",
                generate_cidr=False)}/24"
        ),
        TargetNetworkCaseBundle(
            title="Проверка случайного адреса с маской /32",
            description="Данный кейс проверяет вычисление случайной сети с наименьшей из возможных масок.\n\n"
                        "Данный тест проверяет только корректность вычислений, тестирование локализации или темы оформления в его "
                        "пределах не производится.\n"
                        "Тестирование корректности вычислений производится следующим способом: \n"
                        "1. На стороне тестового фреймворка генерируется случайный (корректный) IP-адрес, но всегда с маской /32.\n"
                        "2. На стороне тестового фреймворка вычисляются все данные подсети, вычисление которых ожидается от "
                        "приложения.\n"
                        "3. Сгенерированный IP-адрес вводится на устройство.\n"
                        "4. На устройстве инициализируется вычисление данных подсети.\n"
                        "5. Тест производит сверку всех рассчитанных на устройстве данных подсети с данными, ранее рассчитанными "
                        "на стороне тестового фреймворка.\n\n"
                        "При возникновении ошибки к отчёту будет приложен скриншот экрана на момент регистрации ошибки.",
            ip_with_cidr=f"{generate_valid_ip(generate_cidr=False)}/32"
        ),
    ]


def get_partial_filled_ips_cases():
    def octet():
        return str(random.randint(0, 255))

    def cidr():
        return str(random.randint(0, 32))

    partially_generated_ips = [
        [None, octet(), octet(), octet(), cidr(), 'Пропуск ввода первого октета',
         'выполняется пропуск ввода первого октета'],
        [octet(), None, octet(), octet(), cidr(), 'Пропуск ввода второго октета',
         'выполняется пропуск ввода второго октета'],
        [octet(), octet(), None, octet(), cidr(), 'Пропуск ввода третьего октета',
         'выполняется пропуск ввода третьего октета'],
        [octet(), octet(), octet(), None, cidr(), 'Пропуск ввода четвёртого октета',
         'выполняется пропуск ввода четвёртого октета'],
        [octet(), octet(), octet(), octet(), None, 'Пропуск выбора маски сети', 'пропускается выбор сетевой маски']
    ]

    cases = []

    for partially_generated_ip in partially_generated_ips:
        oc1 = partially_generated_ip[0] or '192'
        oc2 = partially_generated_ip[1] or '168'
        oc3 = partially_generated_ip[2] or '1'
        oc4 = partially_generated_ip[3] or '1'
        cidr = partially_generated_ip[4] or '24'

        ip_as_text = f'{oc1}.{oc2}.{oc3}.{oc4}/{cidr}'
        ip_as_list = [partially_generated_ip[0],
                      partially_generated_ip[1],
                      partially_generated_ip[2],
                      partially_generated_ip[3],
                      partially_generated_ip[4]]

        cases.append(
            PartialIpDataset(
                ip_as_text=ip_as_text,
                ip_as_list=ip_as_list,
                case_title=partially_generated_ip[5],
                case_description_part=partially_generated_ip[6]
            )
        )

    return cases
